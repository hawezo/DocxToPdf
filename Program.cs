using DocxToPdf.Converters;
using System;
using DocxToPdf.Core;
using System.IO;

namespace DocxToPdf
{
    public class Program
    {

        /// <summary>
        /// Main method.
        /// </summary>
        /// <param name="args">See CommandLineArgs class for more.</param>
        static void Main(string[] args)
        {
            // Dependent to CommandLineParser, external library
            CommandLineArguments options = new CommandLineArguments();
            if (CommandLine.Parser.Default.ParseArguments(args, options))
            {
                Logger.Silent = options.Silent;
                Logger.Normal("Input file: {0}", options.InputFile);

                FileInfo fi = new FileInfo(options.InputFile);

                // Convert process
                try
                {
                    if (!File.Exists(options.InputFile))
                        throw new FileNotFoundException("Input file has not been found.");

                    string output = (String.IsNullOrEmpty(options.OutputFile) ? new FileInfo(fi.Name.Replace(fi.Extension, ".pdf")).FullName : options.OutputFile);
                    if (String.IsNullOrEmpty(new FileInfo(output).Extension))
                        output += ".pdf";

                    DateTime started = DateTime.Now;

                    Logger.Normal("Converting...");
                    PdfConverter.ConvertFromHtml(HtmlConverter.ConvertFromDocx(options.InputFile), output);

                    PerformCleanup(fi);

                    Logger.Normal("Output file: {0}", output);

                    TimeSpan time = DateTime.Now - started;
                    Logger.Normal("Done in {0} ms.", ((int)time.TotalMilliseconds).ToString());
                }

                // Input file hasn't been found
                catch (FileNotFoundException e404)
                {
                    Program.PerformCleanup(fi);
                    Logger.Error(e404.Message);
                    Environment.Exit(1);
                }

                // Either not sufficient permission or file in-use.
                catch (IOException)
                {
                    Program.PerformCleanup(fi);
                    Logger.Error("Unable to finish convertion.");
                    Environment.Exit(1);
                }

                // Another unknown error
                catch (Exception ex)
                {
                    Program.PerformCleanup(fi);
                    Logger.Error("An error occured while converting {0}: {1}", options.InputFile, ex.Message);
                    Logger.Error(ex.StackTrace);
                    Environment.Exit(1);
                }

                // Clean up HTML files (at least, tries to)
                finally
                {
                    Program.PerformCleanup(fi);
                }

                if (!options.Silent)
                    Console.Read();
            }
        }

        /// <summary>
        /// Clears image folder generated by DocxConverter.
        /// </summary>
        /// <param name="input">Initial input file.</param>
        private static void PerformCleanup(FileInfo input)
        {
            try
            {
                string imageDirectory = input.FullName.Replace(".docx", null) + "_images";
                if (Directory.Exists(imageDirectory))
                    Directory.Delete(imageDirectory, true);
            }
            catch (Exception ex)
            {
                Logger.Error(ex.Message);
            }
        }

    }
}